Singleton design patterns:-

package prac;

public class Singleton {

	public static void main(String[] args) {

//		Abc obj = Abc.getInstance();
//		obj.display();
		
		
		//lazy instantiation
//		Abc2 obj = Abc2.getInstance();
//		Abc2 obj2 = Abc2.getInstance();
		
		//using synchronized
		
		/*Thread thread1 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				DoubleCheckedLocking obj = DoubleCheckedLocking.getInstance();
				
			}
		});
		
		Thread thread2 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				DoubleCheckedLocking obj = DoubleCheckedLocking.getInstance();
				
			}
		});
		
		thread1.start();
		thread2.start();*/
		
		EnumDemo obj1= EnumDemo.INSTANCE;
		obj1.i=4;
		obj1.show();
		
		EnumDemo obj2= EnumDemo.INSTANCE;
		obj2.i=6;
		obj1.show();
	}

}

class Abc{
	
	static Abc obj=new Abc(); //eagerly object is created
	
	private Abc() {
		
	}
	
	public static Abc getInstance() {
		return obj;
	}
	
	public void display() {
		System.out.println("Welcome to Singleton Class.");
	}
}

class Abc2{
	
	public static Abc2 obj; //lazy object is created whenever getInstance is called
	
	private Abc2() {
		System.out.println("Instance is created.");
	}
	
	public static synchronized Abc2 getInstance() {
		if(obj == null)
		{
		obj=new Abc2();
		}
		return obj;
	}
	
	public void display() {
		System.out.println("Welcome to Singleton Class.");
	}
}
class DoubleCheckedLocking{
	
	public static DoubleCheckedLocking obj; //lazy object is created whenever getInstance is called
	
	private DoubleCheckedLocking() {
		System.out.println("Instance is created.");
	}
	
	public static DoubleCheckedLocking getInstance() {
		if(obj == null)
		{
			synchronized (DoubleCheckedLocking.class) {
				if(obj == null)
				obj=new DoubleCheckedLocking();
			}
		}
		return obj;
	}
	
	public void display() {
		System.out.println("Welcome to Singleton Class.");
	}
}


enum EnumDemo{
	INSTANCE;
	int i;
	public void show() {
		System.out.println(i);
	}
}


Factory Design pattern:--
--------------------------
1. In factory design pattern , we create object without exposing creation logic to the client.
2. In Simple words, if we have a super class and n subclasses and based on data provided we have to return the object of one of the sub-classes.

Abstract Factory design pattern:--
------------------------

Strategy Design pattern:-
-----------------------------------------
Strategy pattern is very useful for implementing a family of algorithms.
It is a behavioural design pattern.
With the strategy pattern we can select the algorithm at runtime.
We can use it to select the sorting strategy for data.
So we use strategy pattern to hide the algorithm implementation details from client.


Adapter Design Pattern:--
-----------------------------
Adapter pattern works as a bridge between two incompatible interfaces.














