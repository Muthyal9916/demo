@Test:--
Marks a method as a Test
Informs the junit engine what methods needs to run.

assertEquals:-- It will takes two arguments one is expected and acutals
assertEquals(expected,actuals);

TestDriven Junit :-- first write the test cases and create the logic

Maven Surefire plugin :-- Through maven commands need to run the Junit test cases.
  have to add pom.xml file in this commands
  <build>
     <plugins>
       <plugin>
             <artifactId>maven-surefire-plugin</artifactId>
             <version>2.22.1</version>
       </plugin>
     </plugins>
   </build>
  
How to write Junit test cases for Private Methods
Using Reflection API
---------------------------
private int sumofTwoNumbers(Integer a,Integer b) {
		return a + b;
	}
@Test
	public void testSumofTwoNumbers() throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		
		Method method = MathUtils.class.getDeclaredMethod("sumofTwoNumbers", Integer.class,Integer.class);
		method.setAccessible(true);
		MathUtils mathutils = new MathUtils();
		int sum = (int) method.invoke(mathutils, 10,30);
		assertEquals(40, sum);
		
	} 
 
 
Junit 5 provides a feature to disable entire test classes are test methods.
@Disabled annotation allows us to skip or disable tests.
@Disabled annotation takes in a optional parameter.

@DisplayNames provide the Custome Names for test classes and methods

	@Test
	@DisplayName("Skip this test case.")
	@Disabled
	void testDivide() {
		MathUtils mathUtils = new MathUtils();
		assertThrows(ArithmeticException.class, () -> mathUtils.divide(1, 0),"Divideby zero should throw exception");
		
	}

assertNotNull() method:--
---------------------
This method helps us in validating that the particular object is not null.
This method takes an actual value and checks whether it is null or not.
If the actual value is not null then test case will pass

@BeforeEach
This will execute before each test method runs
	







