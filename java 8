Predicate: 
Predicate is an functional interface
By using predicate we can perform conditional operations on collection object.

Example:-
--------------
1. class Emp{
	
	private String empId,empName,empDesg;
	int age;
	private int bsal;
	
	public Emp(String empId, String empName, String empDesg, int age, int bsal) {
		super();
		this.empId = empId;
		this.empName = empName;
		this.empDesg = empDesg;
		this.age = age;
		this.bsal = bsal;
	}

	@Override
	public String toString() {
		return "Emp [empId=" + empId + ", empName=" + empName + ", empDesg=" + empDesg + ", age=" + age + ", bsal="
				+ bsal + "]";
	}
}

2.  public class PredicateDemo {
  	public static void main(String[] args) {
		ArrayList<Emp> a1 = new ArrayList<Emp>();
		a1.add(new Emp("101", "muthu", "SE", 13, 500));
		a1.add(new Emp("102", "raju", "TE", 14, 900));
		a1.add(new Emp("103", "chinny", "EE", 15, 200));
		a1.add(new Emp("104", "bunny", "E", 12, 400));
		a1.add(new Emp("105", "pinku", "ME", 45, 300));
		a1.add(new Emp("106", "dad", "GE", 22, 600));
	
		a1.forEach((s) ->{
			System.out.println(s);
		});
		
		Predicate<Emp> p1 = (p)->p.age>=14;
		
		System.out.println("--------Dis emp data where age >=14");
		
		a1.forEach((s) ->{
			
			if(p1.test(s)) {
				System.out.println(s);
			}
		});
		
	}
	
}
